The programming community might just be one of the least scientific communities out there. It's understandable, writing a million lines of code in one paradigm then rewriting it in another paradigm just to see which is better in that specific case is a pretty hard sell. Therefore, every decision about how to program is based almost entirely on theory. Programming is still a relatively new field, so experience in it is still relatively low. Unfortunately, I'm not much better myself, having been a programmer for only 11 or so years. But still, I've spent countless hours contemplating the fundamentals of programming paradigms, including their problems and the causes of said problems. Hopefully this is enough, at least for now, for my thoughts to be respectable.



Part 1

Anyone who has spent even a second in this community will know the paradigm that completely dominates everything: OOP. It needs no introduction, but it does not a solid definition. For the purposes of this work, my definition of an object-oriented program is: a program made of objects which achieve goals mainly by calling methods in other objects.

I'd love to give one big, fundamental reason for why OOP sucks, and though I can (it prioritizes the way humans think over the way programming should work), that doesn't directly explain why it's so bad. OOP is death by a thousand cuts, with countless tiny problems slowly degrading your productivity as scale increases. However, there's still one major problem that trumps all others, and it all has to do with control flow. It's the most important aspect of a program, which becomes obvious if you think for even just a second. When a user clicks a button, they don't care about the factory factories or any other patterns that you use, they care about the sequence of actions that occurs.

And here comes the problem: OOP is built off the idea that control flow doesn't matter. When you add a call to a method, in theory, you don't have to worry about that method's control flow because all the entangled managers and whatnot should handle everything. In reality, though, adding a call to an existing method is a huge gamble, because there's no telling what flags, events, and other systems will be affected.

This might seem harsh, but just think about it. The whole point of OOP is that, instead of a call graph of functions, you can think of your program on an object-to-object basis. Even back when OOP was still Alan Kay's original vision, it still undeniably assumed that control flow doesn't matter. And thought processes like this do have visible effects, such as inheritance in languages like Java ensuring that almost every variable has possibly modified control flow. But the main point is that OOP promises that you can think about an object's control flow completely seperately from other objects' control flows.

Although, there's something kinda strange that I need to address, which is that OOP (excluding inheritance) and procedural are mechanically identical. Just think about the semantics of function calls. In one, you effectively have `funtionName(arg1, arg2, ...)`, and in the other you have `arg1.functionName(arg2, ...)`. C++ literally transforms the second example into the first, because every single thing that you can do in OOP (except inheritence) can be recreated one to one with procedural code. And I don't mean you can accomplish the same tasks in both, all you have to do to change OOP into procedural is swap every method with a function and every object with a struct. So this brings up an interest question, why do many people (including me) say that OOP is better / worse than procedural when they're actually the same thing? As is often the case, the question is technically flawed. Yes they're mechanically identical, but they're extremely different mentally.

Let's take a quick detour. You have a sort of "working memory", which is an extremely short-term memory where you store what you're thinking about at any point in time. This working memory is extremely small, and obviously can't fit the entire inner workings of a program. Therefore, you have to take shortcuts that allow you to consider other parts of the program that deal with what you're actually working on. Programming paradigms can be thought of as a way to represent the important details of the program in a way that easily fits in your working memory. And finally, this is where prodecural and OOP differ. Even though they're mechanically the same, the way they represent the code completely transforms the way you think of a program. Again, OOP promises that you can think of your program on an object-to-object basis. You might want to say that modern programmers have realised that programs can't actually be made like this, but just look at, for example, any tutorial that uses OOP. I can guaruntee that it goes over the objects one at a time, only focusing on the interactions between them whenever it's absolutely required. And it's not even really a concious decision, the truth is that OOP's design literally goes out of its way to hide the program's control flow from you.

Now lets do a little recap. I'm saying that control flow is extremely important for software development (and that's an understatement), please take a minute to check if you agree. I'm also saying that OOP fundamentally disregards control flow, and again, please take a minute to check if you agree. And if you do agree to both statements, you have to agree that OOP is fundamentally flawed. But this is still just theory, does it have any effect in the real world?

Look back at the last time you programmed with OOP, I can pretty much guarantee it went like this: you set everything up with an ideal system of whatever design patterns you want, and with some luck, it might even work without any structural changes. But then comes the modifications and new features. Maybe you try to restructure everything to accommodate, or maybe you try to work the additions into the existing framework. But either way, there's always two stages here: the idealism stage where you build the code, trying to follow OOP's rules, and the reality stage where you use a debugger to fix the control flow and actually make it work.

When adding a new feature, you have to add any new associated data, then add the control flow for the feature. This cannot be changed. In theory you work on an object-to-object basis, but in reality you have to constantly jump between objects. Again, you CANNOT change the fact that you have to add features one control flow at a time. When adding code to an object, you have to keep in mind the effects of the methods you're calling, and you have to keep in mind how that object is used by other objects. Hopefully you fully agree that every time without fail, modifications to an object require modifications to connected objects, which would mean you agree that features have to be added one control flow at a time.

So, what if you agree that OOP does problematically disregard control flow, but you doubt that there are other substantial issues? Well then, let's talk about code reuse. You're taught that you should always reuse code, and you do, because that sounds like obviously good advice. In practice, though, reusing code can actually cause more trouble than it's worth. Just think about this: what if an existing function mostly does what you want, but not exactly? Creating a copy of the function is "bad programming practice", so you have to modify the function to fit your needs. Maybe add a boolean or enum to the arguments? Add a flag that's set in the object? Wait I know, you should use inheritance! None of these are ideal, and in the worst cases, you could end up with a function that only works on tuesdays. What's going on here is that you're modifying code that doesn't concern the feature you're working on, even though that ideally should never happen. If that's done too much, sections of code can inderectly affect other sections of code that shouldn't be related at all. I've seen some applications, like the game BeamNG, have code that is so interconnected that saving a car's configuration changes the camera angle and exits fullscreen (yes, that was a real bug). But as always, what's other solutions are there? Consider the path where you do create a copy of the function, you can do whatever you want without worrying about unrelated code. And when you're done, you can even extract whatever was unedited so that you aren't even left with any duplicate code.

Now let me guess what you're thinking, "this isn't related to OOP, code reuse is a general principal". While true, just think about this: would it make sense to have two methods in an object that do basically the same thing? There's many times where the answer is yes, but it's not every time. For many methods, it feels very wrong to have more than one of it, and that means OOP subconsiously guides you towards code reuse. Whenever you need to call a method in an object, how often do you consider whether to clone the method for your personal use? Probably never, because that sounds ridiculous and completely goes against OOP's principles. However, it's often what needs to be done.

Like I said near the beginning, OOP is death by a thoughsand cuts. It throws away how programming actually works to instead focus on how humans think, and this crops up is so many ways that it's hard to list them all. But that bring up an interesting question, how does programming actually work then?

Programming is where you have data, and you update the data. That's all it is. Yes you can (and should) add more to help curve the effects of scale, but that's the fundamentals of what programming actually is. This, again, shows why OOP is fundamentally a bad idea. It hinders your ability to have data, with it being haphazardly spread among objects where everything is private, and it hinders your ability to update data, since you're constrained to the update methods that were created way before you actually knew what those updates would need to be.



Part 2

If programming is just defining data and how to update it, then ideally, your programming paradigm should focus on defining and updating data in the most practical way possible. Funilly enough, the first ever paradigms got this spot on. Procedural may be a little chaotic, but you can at least see what the program is actually doing. Functional programming had good intentions, but its obsession with correctness makes it impractical for most uses.

One way to program is what I like to call "blob programming", where every piece of data is added to "the blob", and the main loop holds a list of updater functions which update the blob. It may sound scary, but it scales extremely well. There are updater functions for taking user input, updater functions for program logic, updater functions for rendering, etc.



[wip]

Let's talk about the Open-Closed principle, where code should be "open to entension but closed to modification". This idea is absolutely ridiculous, most obviously because there's a nearly infinite number of extensions that could be needed. Should you accomodate for each one? How much technical debt is that going to add? I've seen many people saying that premature optimization is the root of all evil, but no one ever talks about prematurely fixing problems, before they exist. If you always try to fix problems that don't exist yet, you'll innevitably fix problems that will never exist, adding technical debt for no reason. As I've said earlier, you have to add featues one control flow at a time, which means you do end up modifying code anyway, so there's only one reason solution here: make it so that modifying the code isn't a bad thing. If you didn't believe me when I said that the programming community is unscientific, hopefully you'll believe me now.

Throughout this enitre work, I have been unable to process counterarguments to my points. I cannot even think of arguments that poeple could make, expect for "well, this just doesn't apply to the real world".

As you've seen youself, I clearly hate OOP. Despite that, though, I have a confession to make... I use OOP in small quantities. Yes, this may be shocking, but I've found that there are times when using OOP is just fine. Go back to what I was saying with working memory, and how programming paradigms are just ways to represent the important details of a program in a way that easily fits in working memory. Now consider this: if a subsection of code is small enough that its entirety can fit within your working memory, does it really matter what paradigm you're using? Again, this might be shocking, but I'd be willing to say that OOP does have some benefits. Mostly, it makes parts of code less daunting to work with. If you have a small section of code where OOP gives benefits without any weaknesses, why not use it?
